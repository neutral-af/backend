// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type Airport struct {
	Name    string `json:"name"`
	Icao    string `json:"ICAO"`
	Iata    string `json:"IATA"`
	City    string `json:"city"`
	Country string `json:"country"`
}

type Estimate struct {
	ID       string    `json:"id"`
	Price    *Price    `json:"price"`
	Provider *Provider `json:"provider"`
	Carbon   *int      `json:"carbon"`
	Km       *int      `json:"km"`
	Details  *string   `json:"details"`
}

type EstimateIn struct {
	ID      *string          `json:"id"`
	Carbon  *int             `json:"carbon"`
	Options *EstimateOptions `json:"options"`
}

type EstimateOptions struct {
	Provider *Provider `json:"provider"`
}

type Flight struct {
	Departure    *string `json:"departure"`
	Arrival      *string `json:"arrival"`
	FlightNumber *string `json:"flightNumber"`
	Date         *string `json:"date"`
}

type GetAirport struct {
	Search   []*Airport `json:"search"`
	FromIcao *Airport   `json:"fromICAO"`
}

type GetEstimate struct {
	FromFlights *Estimate `json:"fromFlights"`
	FromID      *Estimate `json:"fromID"`
}

type PaymentActions struct {
	Checkout *PaymentResponse `json:"checkout"`
	Confirm  *PaymentResponse `json:"confirm"`
}

type PaymentOptions struct {
	SaveCard   *bool   `json:"saveCard"`
	CustomerID *string `json:"customerID"`
}

type PaymentResponse struct {
	Success                   *bool     `json:"success"`
	CustomerID                *string   `json:"customerID"`
	RequiresAction            *bool     `json:"requiresAction"`
	PaymentIntentClientSecret *string   `json:"paymentIntentClientSecret"`
	Purchase                  *Purchase `json:"purchase"`
}

type Price struct {
	Currency  Currency        `json:"currency"`
	Cents     int             `json:"cents"`
	Breakdown []*PriceElement `json:"breakdown"`
}

type PriceElement struct {
	Name     string   `json:"name"`
	Cents    int      `json:"cents"`
	Currency Currency `json:"currency"`
}

type Purchase struct {
	ID      *string `json:"id"`
	Carbon  int     `json:"carbon"`
	Details *string `json:"details"`
}

type Currency string

const (
	CurrencyUsd Currency = "USD"
	CurrencyEur Currency = "EUR"
	CurrencyGbp Currency = "GBP"
	CurrencyCad Currency = "CAD"
)

var AllCurrency = []Currency{
	CurrencyUsd,
	CurrencyEur,
	CurrencyGbp,
	CurrencyCad,
}

func (e Currency) IsValid() bool {
	switch e {
	case CurrencyUsd, CurrencyEur, CurrencyGbp, CurrencyCad:
		return true
	}
	return false
}

func (e Currency) String() string {
	return string(e)
}

func (e *Currency) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Currency(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Currency", str)
	}
	return nil
}

func (e Currency) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Provider string

const (
	ProviderCloverly      Provider = "Cloverly"
	ProviderDigitalHumani Provider = "DigitalHumani"
)

var AllProvider = []Provider{
	ProviderCloverly,
	ProviderDigitalHumani,
}

func (e Provider) IsValid() bool {
	switch e {
	case ProviderCloverly, ProviderDigitalHumani:
		return true
	}
	return false
}

func (e Provider) String() string {
	return string(e)
}

func (e *Provider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Provider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Provider", str)
	}
	return nil
}

func (e Provider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
