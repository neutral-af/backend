// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"fmt"
	"io"
	"strconv"
)

type EstimateResponse struct {
	Price   *Price   `json:"price"`
	Carbon  *float64 `json:"carbon"`
	Details *string  `json:"details"`
}

type FlightEstimate struct {
	FromAirports *EstimateResponse `json:"fromAirports"`
}

type FromAirportsRequest struct {
	Departure string `json:"departure"`
	Arrival   string `json:"arrival"`
}

type Price struct {
	Currency *Currency `json:"currency"`
	Cents    *int      `json:"cents"`
}

type Currency string

const (
	CurrencyUsd Currency = "USD"
	CurrencyEur Currency = "EUR"
	CurrencyGbp Currency = "GBP"
	CurrencyCad Currency = "CAD"
)

var AllCurrency = []Currency{
	CurrencyUsd,
	CurrencyEur,
	CurrencyGbp,
	CurrencyCad,
}

func (e Currency) IsValid() bool {
	switch e {
	case CurrencyUsd, CurrencyEur, CurrencyGbp, CurrencyCad:
		return true
	}
	return false
}

func (e Currency) String() string {
	return string(e)
}

func (e *Currency) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Currency(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Currency", str)
	}
	return nil
}

func (e Currency) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
